
AWSTemplateFormatVersion: 2010-09-09

  #==============================================================================================================
  #IAM for Clodformation_FullAccess and EC2_FullAccess
Description: 'IAM Roles Template'
Parameters:
  ArnBase:
    Type: String
    Default: arn:aws:iam::aws:policy/
  AWSCloudFormationFullAccess:
    Type: String
    Default: AWSCloudFormationFullAccess
  AmazonEC2FullAccess:
    Type: String
    Default: AmazonEC2FullAccess    
  
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole          
      Policies:
        -
          #PolicyName: CloudFormationFullAccess
          #PolicyDocument:
            #Version: "2012-10-17"
            #Statement:
             # -
                #Effect: "Allow"
                #Action: "cloudformation:*"
                #Resource: "*"    
          PolicyName: EC2FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "ec2:*"
                Resource: "*"    

 #============================================================================================================
  #Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Project-VPC
  #============================================================================================================
  #Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Project-Gateway     
  #============================================================================================================
  #Attach Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  #============================================================================================================
  #Create Subnets
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Project-Subnet-A
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Project-Subnet-B
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/20
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Project-Subnet-C
  #============================================================================================================
  #Create Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Project-RouteTable
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  #============================================================================================================
  #Associate Route table to Subnets
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC
  #============================================================================================================
  #Create security group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Project-SG

#===============================================================================================================
#Create EC2
  WebInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      
      ImageId: ami-80861296
      SubnetId: !Ref SubnetA
      InstanceType: t2.nano
      Tags:
        - Key: Name
          Value: Test EC2Instance